@model Gepa.Site.Models.ClassPlans.ClassPlanModel

@{
    ViewBag.Title = Language.CreateClassPlan;
}

<div class="container">
    <h1 class="gepaTitles">@Language.RegisterClassPlan</h1>

    <div class="classPlanFormArea">
        @using (Html.BeginForm("SaveClassPlan", "ClassPlans", FormMethod.Post, new { id = "classPlanForm" }))
        {
            @Html.HiddenFor(m => m.Id)

            <div class="form-group">
                @Html.LabelFor(m => m.Title)
                @Html.TextBoxFor(m => m.Title, new { @class = "form-control", required = "required", placeholder = string.Format(Language.EnterFieldValueFormatted2, Language.Title.ToLower()) })
                @Html.ValidationMessageFor(m => m.Title)
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Description)
                @Html.TextAreaFor(m => m.Description, new { @class = "form-control gepaTextArea", placeholder = string.Format(Language.EnterFieldValueFormatted, Language.Description.ToLower()) })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Methodology)
                @Html.TextAreaFor(m => m.Methodology, new { @class = "form-control gepaTextArea", placeholder = string.Format(Language.EnterFieldValueFormatted, Language.Methodology.ToLower()) })
            </div>

            <div class="form-group">
                <label>@Language.DivisionOfContent</label>
                <div id="lessonContentListGroup" class="list-group border">
                </div>

                <div style="margin: 10px 0;">
                    <button id="addLessonContent" type="button" class="btn btn-outline-secondary btnGepaCRUD" data-toggle="modal" data-target="#lessonContentModal">
                        <i class="fas fa-plus icon"></i>
                        @Language.Add
                    </button>
                    <button id="editLessonContent" class="btn btn-outline-secondary btnGepaCRUD">
                        <i class="fas fa-edit icon"></i>
                        @Language.Edit
                    </button>
                    <button id="removeLessonContent" class="btn btn-outline-secondary btnGepaCRUD">
                        <i class="fas fa-trash icon"></i>
                        @Language.Exclude
                    </button>
                </div>
            </div>

            <div class="form-group">
                <label>@Language.Goals</label>
                <div id="classGoalsListGroup" class="list-group border">
                </div>

                <div style="margin: 10px 0;">
                    <button id="addClassGoals" type="button" class="btn btn-outline-secondary btnGepaCRUD" data-toggle="modal" data-target="#classGoalsModal">
                        <i class="fas fa-plus icon"></i>
                        @Language.Add
                    </button>
                    <button id="editClassGoals" class="btn btn-outline-secondary btnGepaCRUD">
                        <i class="fas fa-edit icon"></i>
                        @Language.Edit
                    </button>
                    <button id="removeClassGoals" class="btn btn-outline-secondary btnGepaCRUD">
                        <i class="fas fa-trash icon"></i>
                        @Language.Exclude
                    </button>
                </div>
            </div>

            <div class="form-group">
                <label>@Language.Chores</label>
                <div id="choresListGroup" class="list-group border">
                </div>

                <div style="margin: 10px 0;">
                    <button id="addChore" type="button" class="btn btn-outline-secondary btnGepaCRUD" data-toggle="modal" data-target="#addChoresModal">
                        <i class="fas fa-plus icon"></i>
                        @Language.Add
                    </button>
                    <button id="editChore" class="btn btn-outline-secondary btnGepaCRUD">
                        <i class="fas fa-edit icon"></i>
                        @Language.Edit
                    </button>
                    <button id="removeChore" class="btn btn-outline-secondary btnGepaCRUD">
                        <i class="fas fa-trash icon"></i>
                        @Language.Exclude
                    </button>
                </div>
            </div>

            <div class="form-group">
                <label>@Language.Evaluations</label>
                <div id="evaluationsListGroup" class="list-group border">
                </div>

                <div style="margin: 10px 0;">
                    <button id="addEvaluation" type="button" class="btn btn-outline-secondary btnGepaCRUD" data-toggle="modal" data-target="#addEvaluationModal">
                        <i class="fas fa-plus icon"></i>
                        @Language.Add
                    </button>
                    <button id="editEvaluation" class="btn btn-outline-secondary btnGepaCRUD">
                        <i class="fas fa-plus icon"></i>
                        @Language.Edit
                    </button>
                    <button id="removeEvaluation" class="btn btn-outline-secondary btnGepaCRUD">
                        <i class="fas fa-trash icon"></i>
                        @Language.Exclude
                    </button>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Date)
                @Html.EditorFor(m => m.Date, new { htmlAttributes = new { @class = "form-control date-picker gepaInputDate" } })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Observation)
                @Html.TextAreaFor(m => m.Observation, new { @class = "form-control gepaTextArea", placeholder = string.Format(Language.EnterFieldValueFormatted3, Language.Observations.ToLower()) })
            </div>
            <button type="submit" class="btn gepaFormButtons btnSubmitForms">
                <i class="fas fa-save icon"></i>
                @Language.Save
            </button>
            <button class="btn gepaFormButtons">
                <i class="fas fa-times icon"></i>
                @Language.Cancel
            </button>
        }
    </div>

    @{
        Html.RenderAction("ClassGoalsModalView", "ClassPlans", new { classGoalsModel = Model.ClassGoals });
        Html.RenderAction("LessonContentModalView", "ClassPlans", new { lessonsContentModel = Model.Contents });
        Html.RenderAction("EvaluationModalView", "ClassPlans", new { evaluationModel = Model.Evaluations });
        Html.RenderAction("ChoresModalView", "ClassPlans", new { choresModel = Model.Chores });

    }

    @Html.Partial("_NoItemSelectedModal")
</div>

<script>
    $(function () {
        $(".date-picker").datepicker({
            dateFormat: 'dd/mm/yy',
            dayNames: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
            dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S', 'D'],
            dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb', 'Dom'],
            monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
            monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            nextText: 'Próximo',
            prevText: 'Anterior'
        })
    });

    var lessonContentList = [];
    var currentLessonContentObject = null;

    var classGoalList = [];
    var currentClassGoalObject = null;

    var evaluationList = [];
    var currentEvaluationObject = null;

    var choreList = [];
    var currentChoreObject = null;

    $(document).ready(function () {
        $("#addLessonContent").click(function (e) {
            e.preventDefault();
            currentLessonContentObject = null;
        });

        $("#editLessonContent").click(function (e) {
            e.preventDefault();
            if (currentLessonContentObject != null) {
                $('#lessonContentModal').modal('toggle');
            } else {
                $("#noItemSelectedModal").modal('toggle');
            }
        });

        $("#removeLessonContent").click(function (e) {
            e.preventDefault();

            if (currentLessonContentObject != null) {
                $(".gepaContentsItem").each(function (index) {
                    if ($(this).attr('data-guid') == currentLessonContentObject.guid) {
                        $(this).remove();

                        for (var i = 0; i < lessonContentList.length; i++) {
                            if (lessonContentList[i].guid == currentLessonContentObject.guid) {
                                lessonContentList.splice(i, 1);
                                currentLessonContentObject = null;
                            }
                        }
                    }
                });
            } else {
                $("#noItemSelectedModal").modal('toggle');
            }
        });

        $("#addClassGoals").click(function (e) {
            e.preventDefault();
            currentClassGoalObject = null;
        });

        $("#editClassGoals").click(function (e) {
            e.preventDefault();

            if (currentClassGoalObject != null) {
                $('#classGoalsModal').modal('toggle');
            } else {
                $("#noItemSelectedModal").modal('toggle');
            }
        });

        $("#removeClassGoals").click(function (e) {
            e.preventDefault();

            if (currentClassGoalObject != null) {
                $(".gepaClassGoalsItem").each(function (index) {
                    if ($(this).attr('data-guid') == currentClassGoalObject.guid) {
                        $(this).remove();

                        for (var i = 0; i < classGoalList.length; i++) {
                            if (classGoalList[i].guid == currentClassGoalObject.guid) {
                                classGoalList.splice(i, 1);
                                currentClassGoalObject = null;
                            }
                        }
                    }
                });
            } else {
                $("#noItemSelectedModal").modal('toggle');
            }
        });

        $("#addEvaluation").click(function (e) {
            e.preventDefault();
            currentEvaluationObject = null;
        });

        $("#editEvaluation").click(function (e) {
            e.preventDefault();
            if (currentEvaluationObject != null) {
                $('#addEvaluationModal').modal('toggle');
            } else {
                $("#noItemSelectedModal").modal('toggle');
            }
        });

        $("#removeEvaluation").click(function (e) {
            e.preventDefault();

            if (currentEvaluationObject != null) {
                $(".evaluationItem").each(function (index) {
                    if ($(this).attr('data-guid') == currentEvaluationObject.guid) {
                        $(this).remove();

                        for (var i = 0; i < evaluationList.length; i++) {
                            if (evaluationList[i].guid == currentEvaluationObject.guid) {
                                evaluationList.splice(i, 1);
                                currentEvaluationObject = null;
                            }
                        }
                    }
                });
            } else {
                $("#noItemSelectedModal").modal('toggle');
            }
        });

        $("#addChore").click(function (e) {
            e.preventDefault();
            currentChoreObject = null;
        });

        $("#editChore").click(function (e) {
            e.preventDefault();
            if (currentChoreObject != null) {
                $('#addChoresModal').modal('toggle');
            } else {
                $("#noItemSelectedModal").modal('toggle');
            }
        });

        $("#removeChore").click(function (e) {
            e.preventDefault();

            if (currentChoreObject != null) {
                $(".choreItem").each(function (index) {
                    if ($(this).attr('data-guid') == currentChoreObject.guid) {
                        $(this).remove();

                        for (var i = 0; i < choreList.length; i++) {
                            if (choreList[i].guid == currentChoreObject.guid) {
                                choreList.splice(i, 1);
                                currentChoreObject = null;
                            }
                        }
                    }
                });
            } else {
                $("#noItemSelectedModal").modal('toggle');
            }
        });

        $(document).off("click", ".gepaContentsItem");
        $(document).on("click", ".gepaContentsItem", function () {
            if ($(this).hasClass("active")) {
                currentLessonContentObject = null;
                $(this).removeClass("active")
            } else {
                var selectedLessonContentGuid = $(this).attr('data-guid');

                for (var i = 0; i < lessonContentList.length; i++) {
                    if (lessonContentList[i].guid == selectedLessonContentGuid)
                        currentLessonContentObject = lessonContentList[i];
                }

                $(".gepaContentsItem").removeClass("active")
                $(this).addClass("active")
            }
        });

        $(document).off("click", ".gepaClassGoalsItem");
        $(document).on("click", ".gepaClassGoalsItem", function () {
            if ($(this).hasClass("active")) {
                currentClassGoalObject = null;
                $(this).removeClass("active")
            } else {
                var selectedLessonContentGuid = $(this).attr('data-guid');

                for (var i = 0; i < classGoalList.length; i++) {
                    if (selectedLessonContentGuid == classGoalList[i].guid) {
                        currentClassGoalObject = classGoalList[i];
                    }
                }

                $(".gepaClassGoalsItem").removeClass("active")
                $(this).addClass("active")
            }
        });

        $(document).off("click", ".evaluationItem");
        $(document).on("click", ".evaluationItem", function () {
            if ($(this).hasClass("active")) {
                currentEvaluationObject = null;
                $(this).removeClass("active")
            } else {
                var selectedEvaluationGuid = $(this).attr('data-guid');

                for (var i = 0; i < evaluationList.length; i++) {
                    if (selectedEvaluationGuid == evaluationList[i].guid) {
                        currentEvaluationObject = evaluationList[i];
                    }
                }

                $(".evaluationItem").removeClass("active")
                $(this).addClass("active")
            }
        });

        $(document).off("click", ".choreItem");
        $(document).on("click", ".choreItem", function () {
            if ($(this).hasClass("active")) {
                currentChoreObject = null;
                $(this).removeClass("active")
            } else {
                var selectedEvaluationGuid = $(this).attr('data-guid');

                for (var i = 0; i < choreList.length; i++) {
                    if (selectedEvaluationGuid == choreList[i].guid) {
                        currentChoreObject = choreList[i];
                    }
                }

                $(".choreItem").removeClass("active")
                $(this).addClass("active")
            }
        });

        $(document).off("click", ".objectiveStatus");
        $(document).on("click", ".objectiveStatus", function () {
            var currentGuid = $(this).parents(".gepaClassGoalsItem").attr("data-guid");
            for (var i = 0; i < classGoalList.length; i++) {
                if (classGoalList[i].guid == currentGuid) {
                    classGoalList[i].IsCompleted = $(this).prop("checked");
                }
            }
        });

        $("#classPlanForm").submit(function (e) {
            e.preventDefault();
            var classPlan = objectifyForm($(this).serializeArray());
            classPlan.Contents = lessonContentList;
            classPlan.ClassGoals = classGoalList;
            classPlan.Evaluations = evaluationList;
            var data = JSON.stringify(classPlan);
            $.ajax({
                type: "POST",
                url: $(this).attr('action'),
                data: data,
                contentType: "application/json",
                success: function (data) {
                    if (data) {
                        window.location.href = data;
                    }
                }
            })
        });
    });
</script>